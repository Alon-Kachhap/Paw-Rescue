// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          Role      @default(VOLUNTEER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  volunteer     Volunteer?
  organization  Organization?
}

model Volunteer {
  id            String    @id @default(cuid())
  userId        String    @unique
  firstName     String
  lastName      String
  phone         String
  address       String
  aboutYourself String?
  user          User      @relation(fields: [userId], references: [id])
  applications  Application[]
}

model Organization {
  id              String    @id @default(cuid())
  userId          String    @unique
  name            String
  type            String
  regNumber       String    @unique
  phone           String
  address         String
  mission         String
  user            User      @relation(fields: [userId], references: [id])
  animals         Animal[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Animal {
  id              String    @id @default(cuid())
  name            String
  type            String
  breed           String
  age             String
  gender          String
  image           String
  description     String
  status          Status    @default(AVAILABLE)
  organizationId  String
  organization    Organization @relation(fields: [organizationId], references: [id])
  applications    Application[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Application {
  id            String    @id @default(cuid())
  type          ApplicationType
  status        ApplicationStatus @default(PENDING)
  animalId      String
  animal        Animal    @relation(fields: [animalId], references: [id])
  volunteerId   String
  volunteer     Volunteer @relation(fields: [volunteerId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  ADMIN
  VOLUNTEER
  ORGANIZATION
}

enum Status {
  AVAILABLE
  RESERVED
  ADOPTED
}

enum ApplicationType {
  ADOPTION
  FOSTER
}

enum ApplicationStatus {
  PENDING
  APPROVED
  REJECTED
}
